{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/79d385a5-d2d4-44f9-ab81-763c71e795cd/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "79d385a5-d2d4-44f9-ab81-763c71e795cd",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 24309 bytes",
  "modules": [
    "verainsecure.war"
  ],
  "modules_count": 1,
  "findings": [
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1000,
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable badSqlQuery. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/SQLInjection.java",
          "line": 81,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.SQLInjection.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.SQLInjection"
        }
      },
      "flaw_match": {
        "procedure_hash": "3167886882",
        "prototype_hash": "3825569730",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      }
    },
    {
      "title": "java.io.PrintWriter.println",
      "issue_id": 1015,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data from the variable htmlResponse. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/XSS.java",
          "line": 45,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.XSS.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.XSS"
        }
      },
      "flaw_match": {
        "procedure_hash": "3674918427",
        "prototype_hash": "1326927592",
        "flaw_hash": "239218340",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      }
    },
    {
      "title": "java.io.PrintWriter.println",
      "issue_id": 1014,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to java.io.PrintWriter.println() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/SQLInjection.java",
          "line": 83,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.SQLInjection.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.SQLInjection"
        }
      },
      "flaw_match": {
        "procedure_hash": "3167886882",
        "prototype_hash": "3825569730",
        "flaw_hash": "791601084",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2522620835",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2930988153",
        "cause_hash2_ordinal": "1"
      }
    },
    {
      "title": "java.io.File.!operator_javanewinit",
      "issue_id": 1006,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/PathTraversal.java",
          "line": 34,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.PathTraversal.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.PathTraversal"
        }
      },
      "flaw_match": {
        "procedure_hash": "4106624642",
        "prototype_hash": "4204882957",
        "flaw_hash": "3280386692",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2047187794",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "272303483",
        "cause_hash2_ordinal": "1"
      }
    },
    {
      "title": "java.io.File.!operator_javanewinit",
      "issue_id": 1007,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "External Control of File Name or Path",
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/PathTraversal.java",
          "line": 40,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.PathTraversal.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.PathTraversal"
        }
      },
      "flaw_match": {
        "procedure_hash": "4106624642",
        "prototype_hash": "4204882957",
        "flaw_hash": "3132040767",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3986872594",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3316386894",
        "cause_hash2_ordinal": "1"
      },
      "mitigation": {
        "custom_cleanser": {
          "name": "File Path Cleanser",
          "annotation": "com.veracode.annotation.FilePathCleanser",
          "frame_id": "4",
          "cleanser_prototype": "java.lang.String cleanFilePath(java.lang.String)",
          "user_comment": "AlphaNumeric Regex to Fix File Path CWE73"
        }
      }
    },
    {
      "title": "javax.servlet.http.HttpServletResponse.sendRedirect",
      "issue_id": 1009,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.sendRedirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/OpenRedirect.java",
          "line": 37,
          "function_name": "doGet",
          "qualified_function_name": "xyz.veracode.verainsecure.OpenRedirect.doGet",
          "function_prototype": "void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.OpenRedirect"
        }
      },
      "flaw_match": {
        "procedure_hash": "1696535058",
        "prototype_hash": "2950003278",
        "flaw_hash": "239218340",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      }
    },
    {
      "title": "org.apache.log4j.Category.info",
      "issue_id": 1013,
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Output Neutralization for Logs",
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable username. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/CRLFInjection.java",
          "line": 38,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.CRLFInjection.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.CRLFInjection"
        }
      },
      "flaw_match": {
        "procedure_hash": "1928028476",
        "prototype_hash": "3668797507",
        "flaw_hash": "239218340",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      }
    },
    {
      "title": "java.sql.DriverManager.getConnection",
      "issue_id": 1004,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "reliability",
      "issue_type": "J2EE Bad Practices: Direct Management of Connections",
      "cwe_id": "245",
      "display_text": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/SQLInjection.java",
          "line": 53,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.SQLInjection.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.SQLInjection"
        }
      },
      "flaw_match": {
        "procedure_hash": "3167886882",
        "prototype_hash": "3825569730",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      }
    },
    {
      "title": "java.io.PrintWriter.println",
      "issue_id": 1017,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the java.io.PrintWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing untrusted data) from the variable e.getStackTrace(). The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getStackTrace.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/ErrorMessageExposure.java",
          "line": 54,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.ErrorMessageExposure.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.ErrorMessageExposure"
        }
      },
      "flaw_match": {
        "procedure_hash": "3596337948",
        "prototype_hash": "3707845630",
        "flaw_hash": "2559643004",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3228581583",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2853736140",
        "cause_hash2_ordinal": "1"
      }
    },
    {
      "title": "java.sql.DriverManager.getConnection",
      "issue_id": 1002,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "reliability",
      "issue_type": "J2EE Bad Practices: Direct Management of Connections",
      "cwe_id": "245",
      "display_text": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/ErrorMessageExposure.java",
          "line": 61,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.ErrorMessageExposure.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.ErrorMessageExposure"
        }
      },
      "flaw_match": {
        "procedure_hash": "3596337948",
        "prototype_hash": "3707845630",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      }
    },
    {
      "title": "java.io.PrintWriter.println",
      "issue_id": 1018,
      "gob": "B",
      "severity": 2,
      "issue_type_id": "taint",
      "issue_type": "Information Exposure Through an Error Message",
      "cwe_id": "209",
      "display_text": "\u003cspan\u003e The application calls the java.io.PrintWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing untrusted data) from the variable e.getStackTrace(). The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getStackTrace.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/ErrorMessageExposure.java",
          "line": 65,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.ErrorMessageExposure.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.ErrorMessageExposure"
        }
      },
      "flaw_match": {
        "procedure_hash": "3596337948",
        "prototype_hash": "3707845630",
        "flaw_hash": "2559643004",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "3228581583",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2853736140",
        "cause_hash2_ordinal": "1"
      }
    },
    {
      "title": "java.sql.Connection.createStatement",
      "issue_id": 1008,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "reliability",
      "issue_type": "Improper Resource Shutdown or Release",
      "cwe_id": "404",
      "display_text": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable badStmt, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/SQLInjection.java",
          "line": 80,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.SQLInjection.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.SQLInjection"
        }
      },
      "flaw_match": {
        "procedure_hash": "3167886882",
        "prototype_hash": "3825569730",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      }
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1001,
      "gob": "B",
      "severity": 0,
      "issue_type_id": "reliability",
      "issue_type": "Improper Resource Shutdown or Release",
      "cwe_id": "404",
      "display_text": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable rs, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "xyz/veracode/verainsecure/SQLInjection.java",
          "line": 81,
          "function_name": "doPost",
          "qualified_function_name": "xyz.veracode.verainsecure.SQLInjection.doPost",
          "function_prototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "xyz.veracode.verainsecure.SQLInjection"
        }
      },
      "flaw_match": {
        "procedure_hash": "3167886882",
        "prototype_hash": "3825569730",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "0",
        "cause_hash2_ordinal": "0"
      }
    }
  ],
  "pipeline_scan": "21.3.1-0",
  "dev_stage": "DEVELOPMENT"
}